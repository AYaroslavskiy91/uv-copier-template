import contextlib
from _typeshed import Incomplete
from typing import Any, ClassVar, Literal, Self

from plumbum.commands.processes import iter_lines as iter_lines
from plumbum.commands.processes import run_proc as run_proc

__all__ = (
    "ERROUT",
    "AppendingStdoutRedirection",
    "BaseCommand",
    "BaseRedirection",
    "BoundCommand",
    "BoundEnvCommand",
    "ConcreteCommand",
    "Pipeline",
    "RedirectionError",
    "StderrRedirection",
    "StdinDataRedirection",
    "StdinRedirection",
    "StdoutRedirection",
    "iter_lines",
    "run_proc",
    "shquote",
    "shquote_list",
)

class RedirectionError(Exception): ...

def shquote(text) -> str: ...
def shquote_list(seq) -> list[str]: ...

class BaseCommand:
    def __or__(self, other) -> Pipeline: ...
    def __gt__(self, file) -> bool: ...
    def __rshift__(self, file) -> AppendingStdoutRedirection: ...
    def __ge__(self, file) -> StderrRedirection: ...
    def __lt__(self, file) -> StdinRedirection: ...
    def __lshift__(self, data) -> StdinDataRedirection: ...
    def __getitem__(self, args) -> Self | BoundCommand: ...
    def bound_command(self, *args) -> Self | BoundCommand: ...
    def __call__(self, *args, **kwargs): ...
    def with_env(self, **env) -> Self | BoundEnvCommand: ...
    def with_cwd(self, path) -> Self | BoundEnvCommand: ...
    setenv = with_env
    @property
    def machine(self): ...
    def formulate(self, level: int = 0, args=()): ...
    def popen(self, args=(), **kwargs): ...
    def nohup(
        self,
        cwd: str = ".",
        stdout: str = "nohup.out",
        stderr: Incomplete | None = None,
        append: bool = True,
    ): ...
    def bgrun(
        self, args=(), **kwargs
    ) -> contextlib.AbstractContextManager[Incomplete]: ...
    def run(self, args=(), **kwargs): ...
    def run_bg(self, **kwargs):  # -> Future:
        ...
    def run_fg(self, **kwargs): ...
    def run_tee(self, **kwargs): ...
    def run_tf(self, **kwargs): ...
    def run_retcode(self, **kwargs): ...
    def run_nohup(self, **kwargs): ...

class BoundCommand(BaseCommand):
    cmd: Incomplete
    args: Incomplete
    def __init__(self, cmd, args) -> None: ...
    def formulate(self, level: int = 0, args=()): ...
    @property
    def machine(self): ...
    def popen(self, args=(), **kwargs): ...

class BoundEnvCommand(BaseCommand):
    cmd: Incomplete
    env: Incomplete
    cwd: Incomplete
    def __init__(
        self, cmd, env: Incomplete | None = None, cwd: Incomplete | None = None
    ) -> None: ...
    def formulate(self, level: int = 0, args=()): ...
    @property
    def machine(self): ...
    def popen(
        self,
        args=(),
        cwd: Incomplete | None = None,
        env: Incomplete | None = None,
        **kwargs,
    ): ...

class Pipeline(BaseCommand):
    srccmd: Incomplete
    dstcmd: Incomplete
    def __init__(self, srccmd, dstcmd) -> None: ...
    def formulate(self, level: int = 0, args=()) -> list[Any | str]: ...
    @property
    def machine(self): ...
    def popen(self, args=(), **kwargs): ...

class BaseRedirection(BaseCommand):
    __slots__ = ("cmd", "file")
    SYM: ClassVar[str]
    KWARG: ClassVar[str]
    MODE: ClassVar[str]
    cmd: Incomplete
    file: Incomplete
    def __init__(self, cmd, file) -> None: ...
    def formulate(self, level: int = 0, args=()) -> list[Any | str]: ...
    @property
    def machine(self): ...
    def popen(self, args=(), **kwargs): ...

class StdinRedirection(BaseRedirection):
    __slots__ = ()
    SYM: ClassVar[str] = "<"
    KWARG: ClassVar[str] = "stdin"
    MODE: ClassVar[str] = "r"

class StdoutRedirection(BaseRedirection):
    __slots__ = ()
    SYM: ClassVar[str] = ">"
    KWARG: ClassVar[str] = "stdout"
    MODE: ClassVar[str] = "w"

class AppendingStdoutRedirection(BaseRedirection):
    __slots__ = ()
    SYM: ClassVar[str] = ">>"
    KWARG: ClassVar[str] = "stdout"
    MODE: ClassVar[str] = "a"

class StderrRedirection(BaseRedirection):
    __slots__ = ()
    SYM: ClassVar[str] = "2>"
    KWARG: ClassVar[str] = "stderr"
    MODE: ClassVar[str] = "w"

class _ERROUT(int):
    def __repr__(self) -> Literal["ERROUT"]: ...
    def __str__(self) -> Literal["&1"]: ...

ERROUT: _ERROUT

class StdinDataRedirection(BaseCommand):
    CHUNK_SIZE: int
    cmd: Incomplete
    data: Incomplete
    def __init__(self, cmd, data) -> None: ...
    def formulate(self, level: int = 0, args=()) -> list[Any | str]: ...
    @property
    def machine(self): ...
    def popen(self, args=(), **kwargs): ...

class ConcreteCommand(BaseCommand):
    QUOTE_LEVEL: ClassVar[int]
    executable: Incomplete
    custom_encoding: Incomplete
    cwd: Incomplete
    env: Incomplete
    def __init__(self, executable, encoding) -> None: ...
    def formulate(self, level: int = 0, args=()) -> list[str]: ...
    @property
    def machine(self): ...
    def popen(self, args=(), **kwargs): ...
