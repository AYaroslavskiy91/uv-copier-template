import builtins
import os
from _typeshed import Incomplete
from collections.abc import Generator
from contextlib import AbstractContextManager
from logging import Logger
from typing import IO, Any, Never, Self

from plumbum.path.base import FSUser, Path

logger: Logger
_EMPTY = ...

class LocalPath(Path):
    CASE_SENSITIVE: bool
    def __new__(cls, *parts) -> LocalPath | Self: ...
    @property
    def name(self) -> str: ...
    @property
    def dirname(self) -> LocalPath: ...
    @property
    def suffix(self) -> str: ...
    @property
    def suffixes(self) -> builtins.list[str]: ...
    @property
    def uid(self) -> FSUser: ...
    @property
    def gid(self) -> FSUser: ...
    def join(self, *others) -> LocalPath: ...
    def list(self) -> builtins.list[Self]: ...
    def iterdir(self) -> Generator[Self, None, None]: ...
    def is_dir(self) -> bool: ...
    def is_file(self) -> bool: ...
    def is_symlink(self) -> bool: ...
    def exists(self) -> bool: ...
    def stat(self) -> os.stat_result: ...
    def with_name(self, name) -> Self: ...
    @property
    def stem(self) -> str: ...
    def with_suffix(self, suffix, depth: int | None = 1) -> LocalPath: ...
    def glob(self, pattern): ...
    def delete(self) -> None: ...
    def move(self, dst) -> LocalPath: ...
    def copy(self, dst, override: bool | None = None) -> LocalPath: ...
    def mkdir(
        self, mode: int = 0o777, parents: bool = True, exist_ok: bool = True
    ) -> None: ...
    def open(self, mode: str = "r", encoding: str | None = None) -> IO[Any]: ...
    def read(
        self, encoding: Incomplete | None = None, mode: str = "r"
    ) -> Incomplete: ...
    def write(
        self, data, encoding: Incomplete | None = None, mode: str | None = None
    ) -> None: ...
    def touch(self) -> None: ...
    def chown(
        self,
        owner: Incomplete | int | None = None,
        group: Incomplete | int | None = None,
        recursive: Incomplete | bool | None = None,
    ) -> None: ...
    def chmod(self, mode: int) -> None: ...
    def access(self, mode: int | str = 0) -> bool: ...
    def link(self, dst) -> None: ...
    def symlink(self, dst) -> None: ...
    def unlink(self) -> None: ...
    def as_uri(self, scheme: str | None = "file") -> str: ...
    @property
    def drive(self) -> str: ...
    @property
    def root(self) -> str: ...

class LocalWorkdir(LocalPath):
    def __hash__(self) -> Never: ...
    def __new__(cls) -> Self: ...
    def chdir(self, newdir: str | LocalPath) -> Self: ...
    def getpath(self) -> LocalPath: ...
    def __call__(self, newdir) -> AbstractContextManager[Self]: ...
