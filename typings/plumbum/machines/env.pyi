from _typeshed import Incomplete
from contextlib import AbstractContextManager
from typing import Never

class EnvPathList(list):
    def __init__(self, path_factory, pathsep) -> None: ...
    def append(self, path) -> None: ...
    def extend(self, paths) -> None: ...
    def insert(self, index, path) -> None: ...
    def index(self, path) -> None: ...  # type: ignore[override]
    def __contains__(self, path) -> bool: ...
    def remove(self, path) -> None: ...
    def update(self, text) -> None: ...
    def join(self): ...

class BaseEnv:
    CASE_SENSITIVE: bool
    def __init__(self, path_factory, pathsep, *, _curr) -> None: ...
    def __call__(self, *args, **kwargs) -> AbstractContextManager[None]: ...
    def __iter__(self): ...
    def __hash__(self) -> Never: ...
    def __len__(self) -> int: ...
    def __contains__(self, name) -> bool: ...
    def __getitem__(self, name): ...
    def keys(self): ...
    def items(self): ...
    def values(self): ...
    def get(self, name, *default): ...
    def __delitem__(self, name) -> None: ...
    def __setitem__(self, name, value) -> None: ...
    def pop(self, name, *default): ...
    def clear(self) -> None: ...
    def update(self, *args, **kwargs) -> None: ...
    def getdict(self) -> dict[Incomplete, str]: ...
    @property
    def path(self) -> EnvPathList: ...
    home: Incomplete
    @property
    def user(self) -> Incomplete | str | None: ...
